// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`, `fmt`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RustState>>
abstract class RustState implements RustOpaqueInterface {
  int get bpm;

  int get currentStep;

  bool get isPlaying;

  List<SequencerPattern> get patterns;

  set bpm(int bpm);

  set currentStep(int currentStep);

  set isPlaying(bool isPlaying);

  set patterns(List<SequencerPattern> patterns);

  Future<void> decrementBpm();

  Future<void> incrementBpm();

  factory RustState() => RustLib.instance.api.crateAppRustStateNew();

  Future<void> setBaseState({required BaseRustState baseState});

  Future<void> start();

  Future<void> stop();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SequencerPattern>>
abstract class SequencerPattern implements RustOpaqueInterface {
  int get currentStep;

  int get numSteps;

  double get stepLength;

  List<SequencerStep> get steps;

  int get stepsPerBeat;

  set currentStep(int currentStep);

  set numSteps(int numSteps);

  set stepLength(double stepLength);

  set steps(List<SequencerStep> steps);

  set stepsPerBeat(int stepsPerBeat);

  factory SequencerPattern() =>
      RustLib.instance.api.crateAppSequencerPatternNew();

  Future<void> setBaseState({required BaseRustState baseState});
}

class SequencerStep {
  final bool active;
  final int velocity;
  final int note;

  const SequencerStep.raw({
    required this.active,
    required this.velocity,
    required this.note,
  });

  factory SequencerStep() => RustLib.instance.api.crateAppSequencerStepNew();

  @override
  int get hashCode => active.hashCode ^ velocity.hashCode ^ note.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SequencerStep &&
          runtimeType == other.runtimeType &&
          active == other.active &&
          velocity == other.velocity &&
          note == other.note;
}
