// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field
// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'app.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter/material.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -726049753;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_ui',
        ioDirectory: '../target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Stream<void> crateFrbGeneratedBaseRustStateCreateNotifyUiStream({
    required BaseRustState that,
  });

  BaseRustState crateFrbGeneratedBaseRustStateEmpty();

  int crateAppRustStateAutoAccessorGetBpm({required RustState that});

  int crateAppRustStateAutoAccessorGetCurrentStep({required RustState that});

  bool crateAppRustStateAutoAccessorGetIsPlaying({required RustState that});

  List<SequencerPattern> crateAppRustStateAutoAccessorGetPatterns({
    required RustState that,
  });

  void crateAppRustStateAutoAccessorSetBpm({
    required RustState that,
    required int bpm,
  });

  void crateAppRustStateAutoAccessorSetCurrentStep({
    required RustState that,
    required int currentStep,
  });

  void crateAppRustStateAutoAccessorSetIsPlaying({
    required RustState that,
    required bool isPlaying,
  });

  void crateAppRustStateAutoAccessorSetPatterns({
    required RustState that,
    required List<SequencerPattern> patterns,
  });

  Future<void> crateAppRustStateDecrementBpm({required RustState that});

  Future<void> crateAppRustStateIncrementBpm({required RustState that});

  RustState crateAppRustStateNew();

  Future<void> crateAppRustStateSetBaseState({
    required RustState that,
    required BaseRustState baseState,
  });

  Future<void> crateAppRustStateStart({required RustState that});

  Future<void> crateAppRustStateStop({required RustState that});

  int crateAppSequencerPatternAutoAccessorGetCurrentStep({
    required SequencerPattern that,
  });

  int crateAppSequencerPatternAutoAccessorGetNumSteps({
    required SequencerPattern that,
  });

  double crateAppSequencerPatternAutoAccessorGetStepLength({
    required SequencerPattern that,
  });

  List<SequencerStep> crateAppSequencerPatternAutoAccessorGetSteps({
    required SequencerPattern that,
  });

  int crateAppSequencerPatternAutoAccessorGetStepsPerBeat({
    required SequencerPattern that,
  });

  void crateAppSequencerPatternAutoAccessorSetCurrentStep({
    required SequencerPattern that,
    required int currentStep,
  });

  void crateAppSequencerPatternAutoAccessorSetNumSteps({
    required SequencerPattern that,
    required int numSteps,
  });

  void crateAppSequencerPatternAutoAccessorSetStepLength({
    required SequencerPattern that,
    required double stepLength,
  });

  void crateAppSequencerPatternAutoAccessorSetSteps({
    required SequencerPattern that,
    required List<SequencerStep> steps,
  });

  void crateAppSequencerPatternAutoAccessorSetStepsPerBeat({
    required SequencerPattern that,
    required int stepsPerBeat,
  });

  SequencerPattern crateAppSequencerPatternNew();

  Future<void> crateAppSequencerPatternSetBaseState({
    required SequencerPattern that,
    required BaseRustState baseState,
  });

  SequencerStep crateAppSequencerStepNew();

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_BaseRustState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_BaseRustState;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_BaseRustStatePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RustState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RustState;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RustStatePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SequencerPattern;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SequencerPattern;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_SequencerPatternPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Stream<void> crateFrbGeneratedBaseRustStateCreateNotifyUiStream({
    required BaseRustState that,
  }) {
    final sink = RustStreamSink<void>();
    handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState(
            that,
            serializer,
          );
          sse_encode_StreamSink_unit_Sse(sink, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateFrbGeneratedBaseRustStateCreateNotifyUiStreamConstMeta,
        argValues: [that, sink],
        apiImpl: this,
      ),
    );
    return sink.stream;
  }

  TaskConstMeta
  get kCrateFrbGeneratedBaseRustStateCreateNotifyUiStreamConstMeta =>
      const TaskConstMeta(
        debugName: "BaseRustState_create_notify_ui_stream",
        argNames: ["that", "sink"],
      );

  @override
  BaseRustState crateFrbGeneratedBaseRustStateEmpty() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState,
          decodeErrorData: null,
        ),
        constMeta: kCrateFrbGeneratedBaseRustStateEmptyConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateFrbGeneratedBaseRustStateEmptyConstMeta =>
      const TaskConstMeta(debugName: "BaseRustState_empty", argNames: []);

  @override
  int crateAppRustStateAutoAccessorGetBpm({required RustState that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateAutoAccessorGetBpmConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateAutoAccessorGetBpmConstMeta =>
      const TaskConstMeta(
        debugName: "RustState_auto_accessor_get_bpm",
        argNames: ["that"],
      );

  @override
  int crateAppRustStateAutoAccessorGetCurrentStep({required RustState that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateAutoAccessorGetCurrentStepConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateAutoAccessorGetCurrentStepConstMeta =>
      const TaskConstMeta(
        debugName: "RustState_auto_accessor_get_current_step",
        argNames: ["that"],
      );

  @override
  bool crateAppRustStateAutoAccessorGetIsPlaying({required RustState that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateAutoAccessorGetIsPlayingConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateAutoAccessorGetIsPlayingConstMeta =>
      const TaskConstMeta(
        debugName: "RustState_auto_accessor_get_is_playing",
        argNames: ["that"],
      );

  @override
  List<SequencerPattern> crateAppRustStateAutoAccessorGetPatterns({
    required RustState that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateAutoAccessorGetPatternsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateAutoAccessorGetPatternsConstMeta =>
      const TaskConstMeta(
        debugName: "RustState_auto_accessor_get_patterns",
        argNames: ["that"],
      );

  @override
  void crateAppRustStateAutoAccessorSetBpm({
    required RustState that,
    required int bpm,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
            that,
            serializer,
          );
          sse_encode_i_32(bpm, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateAutoAccessorSetBpmConstMeta,
        argValues: [that, bpm],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateAutoAccessorSetBpmConstMeta =>
      const TaskConstMeta(
        debugName: "RustState_auto_accessor_set_bpm",
        argNames: ["that", "bpm"],
      );

  @override
  void crateAppRustStateAutoAccessorSetCurrentStep({
    required RustState that,
    required int currentStep,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
            that,
            serializer,
          );
          sse_encode_i_32(currentStep, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateAutoAccessorSetCurrentStepConstMeta,
        argValues: [that, currentStep],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateAutoAccessorSetCurrentStepConstMeta =>
      const TaskConstMeta(
        debugName: "RustState_auto_accessor_set_current_step",
        argNames: ["that", "currentStep"],
      );

  @override
  void crateAppRustStateAutoAccessorSetIsPlaying({
    required RustState that,
    required bool isPlaying,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
            that,
            serializer,
          );
          sse_encode_bool(isPlaying, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateAutoAccessorSetIsPlayingConstMeta,
        argValues: [that, isPlaying],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateAutoAccessorSetIsPlayingConstMeta =>
      const TaskConstMeta(
        debugName: "RustState_auto_accessor_set_is_playing",
        argNames: ["that", "isPlaying"],
      );

  @override
  void crateAppRustStateAutoAccessorSetPatterns({
    required RustState that,
    required List<SequencerPattern> patterns,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
            that,
            serializer,
          );
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
            patterns,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateAutoAccessorSetPatternsConstMeta,
        argValues: [that, patterns],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateAutoAccessorSetPatternsConstMeta =>
      const TaskConstMeta(
        debugName: "RustState_auto_accessor_set_patterns",
        argNames: ["that", "patterns"],
      );

  @override
  Future<void> crateAppRustStateDecrementBpm({required RustState that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateDecrementBpmConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateDecrementBpmConstMeta =>
      const TaskConstMeta(
        debugName: "RustState_decrement_bpm",
        argNames: ["that"],
      );

  @override
  Future<void> crateAppRustStateIncrementBpm({required RustState that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateIncrementBpmConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateIncrementBpmConstMeta =>
      const TaskConstMeta(
        debugName: "RustState_increment_bpm",
        argNames: ["that"],
      );

  @override
  RustState crateAppRustStateNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateNewConstMeta =>
      const TaskConstMeta(debugName: "RustState_new", argNames: []);

  @override
  Future<void> crateAppRustStateSetBaseState({
    required RustState that,
    required BaseRustState baseState,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState(
            baseState,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateSetBaseStateConstMeta,
        argValues: [that, baseState],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateSetBaseStateConstMeta =>
      const TaskConstMeta(
        debugName: "RustState_set_base_state",
        argNames: ["that", "baseState"],
      );

  @override
  Future<void> crateAppRustStateStart({required RustState that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateStartConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateStartConstMeta =>
      const TaskConstMeta(debugName: "RustState_start", argNames: ["that"]);

  @override
  Future<void> crateAppRustStateStop({required RustState that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppRustStateStopConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppRustStateStopConstMeta =>
      const TaskConstMeta(debugName: "RustState_stop", argNames: ["that"]);

  @override
  int crateAppSequencerPatternAutoAccessorGetCurrentStep({
    required SequencerPattern that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppSequencerPatternAutoAccessorGetCurrentStepConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateAppSequencerPatternAutoAccessorGetCurrentStepConstMeta =>
      const TaskConstMeta(
        debugName: "SequencerPattern_auto_accessor_get_current_step",
        argNames: ["that"],
      );

  @override
  int crateAppSequencerPatternAutoAccessorGetNumSteps({
    required SequencerPattern that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppSequencerPatternAutoAccessorGetNumStepsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppSequencerPatternAutoAccessorGetNumStepsConstMeta =>
      const TaskConstMeta(
        debugName: "SequencerPattern_auto_accessor_get_num_steps",
        argNames: ["that"],
      );

  @override
  double crateAppSequencerPatternAutoAccessorGetStepLength({
    required SequencerPattern that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppSequencerPatternAutoAccessorGetStepLengthConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateAppSequencerPatternAutoAccessorGetStepLengthConstMeta =>
      const TaskConstMeta(
        debugName: "SequencerPattern_auto_accessor_get_step_length",
        argNames: ["that"],
      );

  @override
  List<SequencerStep> crateAppSequencerPatternAutoAccessorGetSteps({
    required SequencerPattern that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_sequencer_step,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppSequencerPatternAutoAccessorGetStepsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppSequencerPatternAutoAccessorGetStepsConstMeta =>
      const TaskConstMeta(
        debugName: "SequencerPattern_auto_accessor_get_steps",
        argNames: ["that"],
      );

  @override
  int crateAppSequencerPatternAutoAccessorGetStepsPerBeat({
    required SequencerPattern that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_32,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateAppSequencerPatternAutoAccessorGetStepsPerBeatConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateAppSequencerPatternAutoAccessorGetStepsPerBeatConstMeta =>
      const TaskConstMeta(
        debugName: "SequencerPattern_auto_accessor_get_steps_per_beat",
        argNames: ["that"],
      );

  @override
  void crateAppSequencerPatternAutoAccessorSetCurrentStep({
    required SequencerPattern that,
    required int currentStep,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
            that,
            serializer,
          );
          sse_encode_i_32(currentStep, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppSequencerPatternAutoAccessorSetCurrentStepConstMeta,
        argValues: [that, currentStep],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateAppSequencerPatternAutoAccessorSetCurrentStepConstMeta =>
      const TaskConstMeta(
        debugName: "SequencerPattern_auto_accessor_set_current_step",
        argNames: ["that", "currentStep"],
      );

  @override
  void crateAppSequencerPatternAutoAccessorSetNumSteps({
    required SequencerPattern that,
    required int numSteps,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
            that,
            serializer,
          );
          sse_encode_i_32(numSteps, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppSequencerPatternAutoAccessorSetNumStepsConstMeta,
        argValues: [that, numSteps],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppSequencerPatternAutoAccessorSetNumStepsConstMeta =>
      const TaskConstMeta(
        debugName: "SequencerPattern_auto_accessor_set_num_steps",
        argNames: ["that", "numSteps"],
      );

  @override
  void crateAppSequencerPatternAutoAccessorSetStepLength({
    required SequencerPattern that,
    required double stepLength,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
            that,
            serializer,
          );
          sse_encode_f_32(stepLength, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppSequencerPatternAutoAccessorSetStepLengthConstMeta,
        argValues: [that, stepLength],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateAppSequencerPatternAutoAccessorSetStepLengthConstMeta =>
      const TaskConstMeta(
        debugName: "SequencerPattern_auto_accessor_set_step_length",
        argNames: ["that", "stepLength"],
      );

  @override
  void crateAppSequencerPatternAutoAccessorSetSteps({
    required SequencerPattern that,
    required List<SequencerStep> steps,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
            that,
            serializer,
          );
          sse_encode_list_sequencer_step(steps, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppSequencerPatternAutoAccessorSetStepsConstMeta,
        argValues: [that, steps],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppSequencerPatternAutoAccessorSetStepsConstMeta =>
      const TaskConstMeta(
        debugName: "SequencerPattern_auto_accessor_set_steps",
        argNames: ["that", "steps"],
      );

  @override
  void crateAppSequencerPatternAutoAccessorSetStepsPerBeat({
    required SequencerPattern that,
    required int stepsPerBeat,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
            that,
            serializer,
          );
          sse_encode_i_32(stepsPerBeat, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateAppSequencerPatternAutoAccessorSetStepsPerBeatConstMeta,
        argValues: [that, stepsPerBeat],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateAppSequencerPatternAutoAccessorSetStepsPerBeatConstMeta =>
      const TaskConstMeta(
        debugName: "SequencerPattern_auto_accessor_set_steps_per_beat",
        argNames: ["that", "stepsPerBeat"],
      );

  @override
  SequencerPattern crateAppSequencerPatternNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppSequencerPatternNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppSequencerPatternNewConstMeta =>
      const TaskConstMeta(debugName: "SequencerPattern_new", argNames: []);

  @override
  Future<void> crateAppSequencerPatternSetBaseState({
    required SequencerPattern that,
    required BaseRustState baseState,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState(
            baseState,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppSequencerPatternSetBaseStateConstMeta,
        argValues: [that, baseState],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppSequencerPatternSetBaseStateConstMeta =>
      const TaskConstMeta(
        debugName: "SequencerPattern_set_base_state",
        argNames: ["that", "baseState"],
      );

  @override
  SequencerStep crateAppSequencerStepNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_sequencer_step,
          decodeErrorData: null,
        ),
        constMeta: kCrateAppSequencerStepNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAppSequencerStepNewConstMeta =>
      const TaskConstMeta(debugName: "sequencer_step_new", argNames: []);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_BaseRustState =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_BaseRustState =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RustState =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RustState =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SequencerPattern =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SequencerPattern =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  BaseRustState
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BaseRustStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustState
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RustStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SequencerPattern
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SequencerPatternImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BaseRustState
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BaseRustStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustState
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RustStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SequencerPattern
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SequencerPatternImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustState
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RustStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SequencerPattern
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SequencerPatternImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BaseRustState
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BaseRustStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustState
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RustStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SequencerPattern
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SequencerPatternImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<void> dco_decode_StreamSink_unit_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<SequencerPattern>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern,
        )
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<SequencerStep> dco_decode_list_sequencer_step(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_sequencer_step).toList();
  }

  @protected
  SequencerStep dco_decode_sequencer_step(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SequencerStep.raw(
      active: dco_decode_bool(arr[0]),
      velocity: dco_decode_i_32(arr[1]),
      note: dco_decode_i_32(arr[2]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  BaseRustState
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BaseRustStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RustState
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RustStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SequencerPattern
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SequencerPatternImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  BaseRustState
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BaseRustStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RustState
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RustStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SequencerPattern
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SequencerPatternImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RustState
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RustStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SequencerPattern
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SequencerPatternImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  BaseRustState
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BaseRustStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RustState
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RustStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SequencerPattern
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SequencerPatternImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RustStreamSink<void> sse_decode_StreamSink_unit_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<SequencerPattern>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SequencerPattern>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<SequencerStep> sse_decode_list_sequencer_step(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SequencerStep>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_sequencer_step(deserializer));
    }
    return ans_;
  }

  @protected
  SequencerStep sse_decode_sequencer_step(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_active = sse_decode_bool(deserializer);
    var var_velocity = sse_decode_i_32(deserializer);
    var var_note = sse_decode_i_32(deserializer);
    return SequencerStep.raw(
      active: var_active,
      velocity: var_velocity,
      note: var_note,
    );
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState(
    BaseRustState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BaseRustStateImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
    RustState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RustStateImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    SequencerPattern self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SequencerPatternImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState(
    BaseRustState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BaseRustStateImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
    RustState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RustStateImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    SequencerPattern self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SequencerPatternImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
    RustState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RustStateImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    SequencerPattern self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SequencerPatternImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBaseRustState(
    BaseRustState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as BaseRustStateImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRustState(
    RustState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RustStateImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    SequencerPattern self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SequencerPatternImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_unit_Sse(
    RustStreamSink<void> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
    List<SequencerPattern> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSequencerPattern(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_sequencer_step(
    List<SequencerStep> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_sequencer_step(item, serializer);
    }
  }

  @protected
  void sse_encode_sequencer_step(SequencerStep self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.active, serializer);
    sse_encode_i_32(self.velocity, serializer);
    sse_encode_i_32(self.note, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

// Section: extra_from_parser

Future<void> runRustApp<T>({
  required Widget Function(T state) body,
  required T Function() state,
}) async {
  await RustLib.init();
  runApp(_MyApp(body: (s) => body(s), state: state()));
}

// improve typing later
class _MyApp extends StatefulWidget {
  final Widget Function(dynamic state) body;
  final dynamic state;

  const _MyApp({required this.body, required this.state});

  @override
  State<_MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<_MyApp> {
  late final BaseRustState baseState;

  @override
  void initState() {
    super.initState();
    baseState = BaseRustState(
      onMutate: () {
        if (mounted) setState(() {});
      },
    );
    widget.state.setBaseState(baseState: baseState);
  }

  @override
  void dispose() {
    baseState.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // We can allow users to customize MaterialApp/Scaffold by exposing another argument
    // like `Widget Function() app`; but for simplicity let's customize the `body` by default.
    return MaterialApp(
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
        useMaterial3: true,
      ),
      home: Scaffold(body: widget.body(widget.state)),
    );
  }
}

/// Adapted from https://github.com/mobxjs/mobx.dart/issues/750
// TODO: Move to support library instead of inlining here
class SyncTextField extends StatefulWidget {
  final String text;

  // forward
  final ValueChanged<String>? onChanged;
  final InputDecoration? decoration;
  final ValueChanged<String>? onSubmitted;

  const SyncTextField({
    super.key,
    required this.text,
    this.onChanged,
    this.decoration,
    this.onSubmitted,
  });

  @override
  State<SyncTextField> createState() => _SyncTextFieldState();
}

class _SyncTextFieldState extends State<SyncTextField> {
  late final TextEditingController _controller;

  @override
  void initState() {
    super.initState();
    _controller = TextEditingController();
    _controller.text = widget.text;
  }

  @override
  void didUpdateWidget(covariant SyncTextField oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.text != widget.text) _controller.text = widget.text;
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return TextField(
      controller: _controller,
      // forward
      onChanged: widget.onChanged,
      decoration: widget.decoration,
      onSubmitted: widget.onSubmitted,
    );
  }
}

// These functions are ignored because they are not marked as `pub`: `on_mutation`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BaseRustState>>
abstract class BaseRustState implements RustOpaqueInterface {
  Stream<void> createNotifyUiStream();

  static BaseRustState empty() =>
      RustLib.instance.api.crateFrbGeneratedBaseRustStateEmpty();

  factory BaseRustState({required void Function() onMutate}) {
    final object = BaseRustState.empty();
    object.createNotifyUiStream().listen((_) => onMutate());
    return object;
  }
}

@sealed
class BaseRustStateImpl extends RustOpaque implements BaseRustState {
  // Not to be used by end users
  BaseRustStateImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BaseRustStateImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BaseRustState,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BaseRustState,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BaseRustStatePtr,
  );

  Stream<void> createNotifyUiStream() => RustLib.instance.api
      .crateFrbGeneratedBaseRustStateCreateNotifyUiStream(that: this);
}

@sealed
class RustStateImpl extends RustOpaque implements RustState {
  // Not to be used by end users
  RustStateImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RustStateImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RustState,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RustState,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RustStatePtr,
  );

  int get bpm =>
      RustLib.instance.api.crateAppRustStateAutoAccessorGetBpm(that: this);

  int get currentStep => RustLib.instance.api
      .crateAppRustStateAutoAccessorGetCurrentStep(that: this);

  bool get isPlaying => RustLib.instance.api
      .crateAppRustStateAutoAccessorGetIsPlaying(that: this);

  List<SequencerPattern> get patterns =>
      RustLib.instance.api.crateAppRustStateAutoAccessorGetPatterns(that: this);

  set bpm(int bpm) => RustLib.instance.api.crateAppRustStateAutoAccessorSetBpm(
    that: this,
    bpm: bpm,
  );

  set currentStep(int currentStep) =>
      RustLib.instance.api.crateAppRustStateAutoAccessorSetCurrentStep(
        that: this,
        currentStep: currentStep,
      );

  set isPlaying(bool isPlaying) =>
      RustLib.instance.api.crateAppRustStateAutoAccessorSetIsPlaying(
        that: this,
        isPlaying: isPlaying,
      );

  set patterns(List<SequencerPattern> patterns) => RustLib.instance.api
      .crateAppRustStateAutoAccessorSetPatterns(that: this, patterns: patterns);

  Future<void> decrementBpm() =>
      RustLib.instance.api.crateAppRustStateDecrementBpm(that: this);

  Future<void> incrementBpm() =>
      RustLib.instance.api.crateAppRustStateIncrementBpm(that: this);

  Future<void> setBaseState({required BaseRustState baseState}) => RustLib
      .instance
      .api
      .crateAppRustStateSetBaseState(that: this, baseState: baseState);

  Future<void> start() =>
      RustLib.instance.api.crateAppRustStateStart(that: this);

  Future<void> stop() => RustLib.instance.api.crateAppRustStateStop(that: this);
}

@sealed
class SequencerPatternImpl extends RustOpaque implements SequencerPattern {
  // Not to be used by end users
  SequencerPatternImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SequencerPatternImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SequencerPattern,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SequencerPattern,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_SequencerPatternPtr,
  );

  int get currentStep => RustLib.instance.api
      .crateAppSequencerPatternAutoAccessorGetCurrentStep(that: this);

  int get numSteps => RustLib.instance.api
      .crateAppSequencerPatternAutoAccessorGetNumSteps(that: this);

  double get stepLength => RustLib.instance.api
      .crateAppSequencerPatternAutoAccessorGetStepLength(that: this);

  List<SequencerStep> get steps => RustLib.instance.api
      .crateAppSequencerPatternAutoAccessorGetSteps(that: this);

  int get stepsPerBeat => RustLib.instance.api
      .crateAppSequencerPatternAutoAccessorGetStepsPerBeat(that: this);

  set currentStep(int currentStep) =>
      RustLib.instance.api.crateAppSequencerPatternAutoAccessorSetCurrentStep(
        that: this,
        currentStep: currentStep,
      );

  set numSteps(int numSteps) =>
      RustLib.instance.api.crateAppSequencerPatternAutoAccessorSetNumSteps(
        that: this,
        numSteps: numSteps,
      );

  set stepLength(double stepLength) =>
      RustLib.instance.api.crateAppSequencerPatternAutoAccessorSetStepLength(
        that: this,
        stepLength: stepLength,
      );

  set steps(List<SequencerStep> steps) => RustLib.instance.api
      .crateAppSequencerPatternAutoAccessorSetSteps(that: this, steps: steps);

  set stepsPerBeat(int stepsPerBeat) =>
      RustLib.instance.api.crateAppSequencerPatternAutoAccessorSetStepsPerBeat(
        that: this,
        stepsPerBeat: stepsPerBeat,
      );

  Future<void> setBaseState({required BaseRustState baseState}) => RustLib
      .instance
      .api
      .crateAppSequencerPatternSetBaseState(that: this, baseState: baseState);
}
